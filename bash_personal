# vim: set ft=sh:
# Chad's personal commands

# Use this to check the version of dotfiles installed
# Remember:
# 1. MAJOR version when you make incompatible API changes. Like, maybe, when we
#    move to zsh or something. Looks like this will also be triggered when we
#    _rename_ a function here.
# 2. MINOR version when you add functionality in a backwards-compatible manner.
#    More often than not, this is what will be incremented. Adding new functions
#    definitely falls under this.
# 3. PATCH version when you make backwards-compatible bug fixes. Bug fixes---
#    when you modify the functions in this file to (presumably) fix bugs. 410488
dfiles_ver(){
    echo "1.34.1"
}

alias mypy='mypy --ignore-missing-imports'

# Create a directory and switch to it.
msdir(){
    mkdir $1
    cd $1
}

# Duplicate a file and edit the duplicate (with vi(m)).
cped(){
    cp $1 $2
    vi $2
}

# Move a file and edit the new file (with vi(m)).
mved(){
    mv $1 $2
    vi $2
}

# Create a new executable file (with vi(m)).
xvi(){
    vi $1
    chmod +x $1
}

# Clean ps -eaf | grep
pid(){
    grepstr=$1
    greplen=${#grepstr}
    grepfirst=${grepstr:0:1}
    greprest=${grepstr:1:$greplen-1}
    grepexp="[$grepfirst]$greprest"
    ps -eaf | grep "$grepexp"
}

# Get the most used commands in bash
# Taken from a tip in CoderWall
stats(){
    if [ -z "$1" ]; then
        history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
    else
        history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head -n $1
    fi
}

brc(){
    source ~/.bashrc
}

# This one is from nixCraft
# Edit files with automatic back-up
bake(){
    [ "$1" != "" ] && cp "$1" "$1".bak-`date +%d-%m-%y-%H.%M.%S`; vi "$1";
}

bak(){
    [ "$1" != "" ] && cp "$1" "$1".bak-`date +%d-%m-%y-%H.%M.%S`;
}

# Move specified file/directory to /opt/bin so that it is executable _anywhere_
# on the file system.
#
# If it is a directory, move the _contents_ of the directory into /opt/bin
# instead. All subdirectories will be included in the same level as the normal
# files.
anywhere(){
    # Get number of files first. If it is more than one, we are probably dealing
    # with a glob.
    filecount="$(file $1 | wc -l)"
    if [ $filecount -eq 1 ]; then
        type="$(file $1 | awk '{print $2}')"
        if [ "$type" == "directory" ]; then
            # FIXME What if a file is a (sub)directory too?
            file_dircount=`ls -logA $1 | wc -l`
            file_dircount=`expr $file_dircount - 1`
            find $1 -print0 | tail -n $file_dircount -z | xargs -I xx -0 sudo cp xx /opt/bin/
        else
            sudo cp $1 /opt/bin
            sudo chmod +x /opt/bin/$1
        fi
    else
        for f in $1; do
            type="$(file $1 | wc -l)"
            if [ "$type" == "directory" ]; then
                sudo cp -r $1 /opt/bin
            else
                sudo cp $1 /opt/bin
                sudo chmod +x /opt/bin/$1
            fi
        done
    fi
}

# Create a run script in /opt/bin (with anywhere, do this to keep your binaries
# organized).
anyscript(){
    sudo vi /opt/bin/$1
    sudo chmod +x /opt/bin/$1
}

# Automagically daemonize the process you will execute.
daemonize(){
    procstring=""
    for i in "$@"
    do
        procstring+=" $i"
    done
    nohup $procstring < /dev/null > daemonize.out 2>&1&
}

# If you have maven installed, a maven quickstart give it the group id and the
# artifact id
# sample usage `mvnstart net.skytreader.kode chess-templar`
mvnstart(){
    mvn archetype:generate -DgroupId=$1 -DartifactId=$2 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
}

# Automatically set-up vim syntax stuff. Assumes that you are in the root of a
# directory with subdirectories like ftplugin, indent, syntax, plugin. The vim
# stuff is installed locally to the user.
vip(){
    if [ ! -d ~/.vim ]; then
        mkdir ~/.vim
    fi
    
    # Checks for the user's vim folders
    if [ ! -d ~/.vim/compiler ]; then
        mkdir ~/.vim/compiler
    fi

    if [ ! -d ~/.vim/ftdetect ]; then
        mkdir ~/.vim/ftdetect
    fi

    if [ ! -d ~/.vim/ftplugin ]; then
        mkdir ~/.vim/ftplugin
    fi

    if [ ! -d ~/.vim/indent ]; then
        mkdir ~/.vim/indent
    fi

    if [ ! -d ~/.vim/syntax ]; then
        mkdir ~/.vim/syntax
    fi

    if [ ! -d ~/.vim/plugin ]; then
        mkdir ~/.vim/plugin
    fi

    # Now move the contents of current directory, but only those that apply.
    if [ -d compiler ]; then
        cp compiler/* ~/.vim/compiler
    fi

    if [ -d ftdetect ]; then
        cp ftdetect/* ~/.vim/ftdetect
    fi

    if [ -d ftplugin ]; then
        cp ftplugin/* ~/.vim/ftplugin
    fi

    if [ -d indent ]; then
        cp indent/* ~/.vim/indent
    fi

    if [ -d syntax ]; then
        cp syntax/* ~/.vim/syntax
    fi

    if [ -d plugin ]; then
        cp plugin/* ~/.vim/plugin
    fi
}

# Note that as this uses `sort`, it needs a certain amount of disk space to work
# with. Expect this to fail on completely saturated servers.
find_large_files(){
    du -a $1 | sort -n -r | head -n $2
}

# List packages following a specific pattern. WARNING: Ubuntu-specific.
list_pkgs(){
    dpkg --get-selections | grep $1
}

wttr(){
    sanitized=`echo $@ | sed 's/ /%20/g'`
    curl "wttr.in/$sanitized"
}

# The One True Way
# Also see `python -m compileall`
pycheck(){
    python -m py_compile $1
}

pycd(){
    pushd `python -c "import os.path, $1; print(os.path.dirname($1.__file__))"`
}

mancp(){
    echo "The & operator takes a piece of data and tells you where it's stored."
    echo "The * operator takes an address and tells you what is stored there."
    echo "In the LHS, the * operator behaves a bit differently:"
    echo "int *x_address = &x; // Get the address of x so you can do pointer arithmetic on it."
    echo "*x_address = 42; // Reassign the value stored in x to 42."
}

# Mount windows drive read-only.
# Useful becase Windows boots so slow.
mountwin(){
    sudo mount -t "ntfs" -ro "uhelper=udisks2,nodev,nosuid,uid=1000,gid=1000" "/dev/sda3" "/media/chad/Windows"
}

docker_img_cleanup(){
    docker images -a | grep none | awk '{print $3}' | xargs docker rmi -f
}

crawl(){
    # Quick and dirty crawler (with download!) using wget. Useful for getting
    # ebooks off websites. Just pass the URL of the directory to download.
    # (Legality of action not checked.)
    # From: https://stackoverflow.com/a/273776/777225
    # Note: replace -nd with -x if you want to preserve directory structure.
    wget -e robots=off -r -nH -nd -np -R index.html* $1
}

# display the nth line of the given file.
# Usage: line n file
line(){
    if [ $# -ne 2 ]; then
        echo "Usage: line n file"
        return 1
    fi
    head -n $1 $2 | tail -n 1
}

fx(){
    # Spin up Firefox with a blank profile.
    firefox --new-instance --profile $(mktemp -d)
}

chrm(){
    # Spin up Chrome with a blank profile
    google-chrome --user-data-dir=$(mktemp -d)
}

# Super sed. Given a directory/file pattern ($1), replace all occurences of
# needle ($2) with replacement ($3). Smart enough to skip binary files.
sused(){
    grep -rlI $2 $1 | xargs sed -i "s/$2/$3/g"
}

# Send a message to all terminals.
notify_terms(){
    termcount=`ls -logA /dev/pts | wc -l`
    termcount=`expr $termcount - 1`
    find /dev/pts -print0 | tr \\000 \\n | tail -n $termcount | grep -v ptmx | xargs -Ixx sh -c 'echo $2 > "$1"' -- xx "$@"
}

# Remind me in x seconds about something.
# Usage: remindme <in seconds> "<message>" &
# Although putting this in background is not required, it is recommended so you
# don't need a dedicated terminal just for a reminder.
remindme(){
    seconds=$1
    shift
    message=""
    for i in "$@"; do
        # Unintended side-effect: We can't have more than one whitespace betwen
        # words!
        message+=" $i"
    done
    me="$(whoami)"
    sleep $seconds
    notify_terms "Reminder for $me: $message"
    spd-say "Reminder for $me: $message"
    notify-send --urgency=critical "Reminder for $me: $message"
}

# get access token
gat(){
    xclip -sel clip <~/.ssh/access_tokens/$1
    # TODO Ensure that closing the current terminal session does not prevent this line
    # nohup maybe?
    ((sleep 60; echo "" | xclip -sel clip) &)
}

# Invoke this command on a directory containing only videos and these videos
# will be played one after the other consecutively.
vpl(){
    for video in *; do
        xdg-open "$video"
        sleep $(ffprobe -i "$video" -show_entries format=duration -v quiet -of csv="p=0")
    done
}

# tabs to spaces! Edits the file in a non-destructive manner.
# Usage: tts 4 sony.py
tts(){
    newfile="$(echo $RANDOM).ttstmp"
    expand -t "$1" "$2" > "/tmp/$newfile"
    cat "/tmp/$newfile" > $2
}

# This is supposed to be in work customizations but its something that would be
# nice to have in general regardless. In other issues, maybe have a base set of
# custom work commands.
mk_ansible_role(){
    mkdir -p roles/$1/{files,tasks,templates}
    touch roles/$1/tasks/main.yml
}

docker_prufen(){
    if [ -z "$2" ]; then
        docker run -it --entrypoint /bin/bash $1
    else
        docker run -it --entrypoint $2 $1
    fi
}

docker_laufen(){
    docker run --rm -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v /home/$USERNAME:/home/$USERNAME local/$1:latest
}

gitstalt(){
    git log --graph --all --pretty --decorate --oneline
}

# Sourcery from https://askubuntu.com/a/17300/36150
# If you can be bothered, a more readable format is on https://github.com/gkotian/gautam_linux/blob/master/scripts/colours.sh.
ls_legend(){
    eval $(echo "no:global default;fi:normal file;di:directory;ln:symbolic link;pi:named pipe;so:socket;do:door;bd:block device;cd:character device;or:orphan symlink;mi:missing file;su:set uid;sg:set gid;tw:sticky other writable;ow:other writable;st:sticky;ex:executable;"|sed -e 's/:/="/g; s/\;/"\n/g')
	{
	  IFS=:
	  for i in $LS_COLORS
	  do
	    echo -e "\e[${i#*=}m$( x=${i%=*}; [ "${!x}" ] && echo "${!x}" || echo "$x" )\e[m"
	  done
	}
}

clean_pip_freeze(){
    # TODO Don't rely on writing files in /tmp -- makes this command not atomic.
    # Look up heredocs.
    /home/chad/.virtualenvs/origin3/bin/pip freeze | sort > /tmp/cpf-origin3
    /home/chad/.virtualenvs/$1/bin/pip freeze | sort > /tmp/cpf-$1
    diff --suppress-common-lines /tmp/cpf-origin3 /tmp/cpf-$1 | grep ">" | cut -c 3- > $(pwd)/requirements.txt
}

wacom_profile(){
    # Default Krita hotkey: Fill tool
    xsetwacom set "Wacom Intuos Pro M Pad pad" "Button" "1" "key +f -f"
    xsetwacom set "Wacom Intuos Pro M Pad pad" "Button" "2" "key +ctrl s -ctrl"
    # Personal Krita hotkey: brush tool
    xsetwacom set "Wacom Intuos Pro M Pad pad" "Button" "3" "key +b -b"
    xsetwacom set "Wacom Intuos Pro M Pad pad" "Button" "8" "key +m -m"
    # Personal Krita hotkey: move tool
    xsetwacom set "Wacom Intuos Pro M Pad pad" "Button" "9" "key +4 -4"
    xsetwacom set "Wacom Intuos Pro M Pad pad" "Button" "10" "key +5 -5"
    xsetwacom set "Wacom Intuos Pro M Pad pad" "Button" "11" "key +6 -6"
    if [ "$1" == "" ]; then
        # Personal Krita hotkey: magnetic selection tool
        xsetwacom set "Wacom Intuos Pro M Pad pad" "Button" "12" "key +ctrl m -ctrl"
    elif [ "$1" == "shading" ]; then
        # Personal Krita hotkey: outline selection tool
        xsetwacom set "Wacom Intuos Pro M Pad pad" "Button" "12" "key +ctrl +shift m -ctrl -shift"
    fi
    xsetwacom --set "Wacom Intuos Pro M Finger touch" Touch off
    xsetwacom set "Wacom Intuos Pro M Pad pad" "AbsWheelUp" "key +"
    xsetwacom set "Wacom Intuos Pro M Pad pad" "AbsWheelDown" "key -"
    xsetwacom set "Wacom Intuos Pro M Pen stylus" "Button" "2" "key +ctrl z -ctrl"

    # For some reason, whereas in scheherazade I was able to constrain output
    # via the settings GUI, I can't do it in my work computer. Hence the ff.
    # lines. You can get the monitor names via `xrandr --listactivemonitors`.
    if [ "$(hostname)" != "scheherazade" ]; then
        xsetwacom --set "Wacom Intuos Pro M Pen stylus" MapToOutput "DP-3"
        xsetwacom --set "Wacom Intuos Pro M Pen eraser" MapToOutput "DP-3"
        xsetwacom --set "Wacom Intuos Pro M Pen cursor" MapToOutput "DP-3"
        xsetwacom --set "Wacom Intuos Pro M Pen pad" MapToOutput "DP-3"
        xsetwacom --set "Wacom Intuos Pro M Pen touch" MapToOutput "DP-3"
    fi
}

# Minimize the given pdf file, uses ghostscript.
# Usage: minimize_pdf infile outfile
minimize_pdf(){
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$2" "$1"
}

# Usage: snipgif timestamp_start duration input output scale
# timestamp_start and duration are both in seconds.
snipgif(){
    scale=480
    if [ "$5" != "" ]; then
        scale="$5"
    fi
    ffmpeg -ss "$1" -t "$2" -i "$3" -vf "fps=10,scale=$scale:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 "$4"
}

mp4tvscale(){
    filename="$1"
    no_ext="${filename%.*}"
    ffmpeg -i "$1" -vcodec libx264 -profile:v baseline -level:v 4.0 -vf "scale=1280:-1" "$no_ext-tv.mp4"
}

resize_imgs(){
    target_larger=$1
    target_smaller=$2
    mkdir -p resized

    for file in *.jpg; do
        dimensions=$(identify -format "%wx%h" "$file")
        width=$(echo $dimensions | cut -d'x' -f1)
        height=$(echo $dimensions | cut -d'x' -f2)
    
        if [ "$width" -gt "$height" ]; then
            # Landscape orientation
            convert "$file" -resize ${target_larger}x${target_smaller}^ -gravity center -extent ${target_larger}x${target_smaller} "resized/${file%.*}.jpg"
        else
            # Portrait orientation (or square)
            convert "$file" -resize ${target_smaller}x${target_larger}^ -gravity center -extent ${target_smaller}x${target_larger} "resized/${file%.*}.jpg"
        fi
    done
}

screenshotter(){
    set -u
    RED='\033[0;31m'
    NC='\033[0m'
    timestamps_file=$1
    video_file=$2
    
    output_dir="$video_file-SCREENSHOTS"
    mkdir -p "$output_dir"
    
    # Read each line in the timestamps file and take a screenshot at each timestamp
    while read -r timestamp; do
      echo "========================================"
      echo -e "| Read $RED$timestamp$NC"
      # Some common reformats
      # mm:ss format
      if [[ "$timestamp" =~ ^[0-9]{2}:[0-9]{2}$ ]]; then
        echo "Reformatting '$timestamp'"
        timestamp="00:$timestamp"
      fi

      # m:ss format
      if [[ "$timestamp" =~ ^[0-9]:[0-9]{2}$ ]]; then
        echo "Reformatting '$timestamp'"
        timestamp="00:0$timestamp"
      fi

      echo "Reformatted to '$timestamp'"

      # Validate the timestamp format (optional, can be adjusted as needed)
      if [[ ! "$timestamp" =~ ^[0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
        echo "Warning: Skipping invalid timestamp '$timestamp'"
        continue
      fi
      sanitized_timestamp=$(echo "$timestamp" | tr ':' '-')
      screenshot_file="$output_dir/screenshot_$sanitized_timestamp.png"
    
      # Use ffmpeg to take a screenshot at the given timestamp
      # TODO Make output redirection an option (--clean flag?)
      ffmpeg -y -ss "$timestamp" -i "$video_file" -vframes 1 "$screenshot_file" < /dev/null > /tmp/ffmpeg.log 2>&1
      echo "Screenshot taken at $timestamp -> $screenshot_file"
      echo "========================================"
    
    done < "$timestamps_file"
    
    echo "All screenshots saved to the '$output_dir' directory."
    set +u
}
