# vim: set ft=sh:
# Chad's personal commands

# Use this to check the version of dotfiles installed
dfiles_ver(){
    echo "1.2.2"
}

# Create a directory and switch to it.
msdir(){
    mkdir $1
    cd $1
}

# Duplicate a file and edit the duplicate (with vi(m)).
cped(){
    cp $1 $2
    vi $2
}

# Move a file and edit the new file (with vi(m)).
mved(){
    mv $1 $2
    vi $2
}

# Create a new executable file (with vi(m)).
xvi(){
    vi $1
    chmod +x $1
}

# Clean ps -eaf | grep
pid(){
    grepstr=$1
    greplen=${#grepstr}
    grepfirst=${grepstr:0:1}
    greprest=${grepstr:1:$greplen-1}
    grepexp="[$grepfirst]$greprest"
    ps -eaf | grep "$grepexp"
}

# Get the most used commands in bash
# Taken from a tip in CoderWall
stats(){
    if [ -z "$1" ]; then
        history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
    else
        history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head -n $1
    fi
}

brc(){
    source ~/.bashrc
}

# This one is from nixCraft
# Edit files with automatic back-up
bake(){
    [ "$1" != "" ] && cp "$1" "$1".bak-`date +%d-%m-%y-%H.%M.%S`; vi "$1";
}

# Move specified file/directory to /opt/bin so that it is executable _anywhere_
# on the file system.
anywhere(){
    type="$(file $1 | awk '{print $2}')"
    if [ "$type" == "directory" ]; then
        sudo cp -r $1 /opt/bin/
    else
        sudo cp $1 /opt/bin
        sudo chmod +x /opt/bin/$1
    fi
}

# Create a run script in /opt/bin (with anywhere, do this to keep your binaries
# organized).
anyscript(){
    sudo vi /opt/bin/$1
    sudo chmod +x /opt/bin/$1
}

# Automagically daemonize the process you will execute.
daemonize(){
    procstring=""
    for i in "$@"
    do
        procstring+=" $i"
    done
    nohup $procstring < /dev/null > daemonize.out 2>&1&
}

# If you have maven installed, a maven quickstart give it the group id and the
# artifact id
# sample usage `mvnstart net.skytreader.kode chess-templar`
mvnstart(){
    mvn archetype:generate -DgroupId=$1 -DartifactId=$2 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
}

# Automatically set-up vim syntax stuff. Assumes that you are in the root of a
# directory with subdirectories like ftplugin, indent, syntax, plugin. The vim
# stuff is installed locally to the user.
vip(){
    if [ ! -d ~/.vim ]; then
        mkdir ~/.vim
    fi
    
    # Checks for the user's vim folders
    if [ ! -d ~/.vim/compiler ]; then
        mkdir ~/.vim/compiler
    fi

    if [ ! -d ~/.vim/ftdetect ]; then
        mkdir ~/.vim/ftdetect
    fi

    if [ ! -d ~/.vim/ftplugin ]; then
        mkdir ~/.vim/ftplugin
    fi

    if [ ! -d ~/.vim/indent ]; then
        mkdir ~/.vim/indent
    fi

    if [ ! -d ~/.vim/syntax ]; then
        mkdir ~/.vim/syntax
    fi

    if [ ! -d ~/.vim/plugin ]; then
        mkdir ~/.vim/plugin
    fi

    # Now move the contents of current directory, but only those that apply.
    if [ -d compiler ]; then
        cp compiler/* ~/.vim/compiler
    fi

    if [ -d ftdetect ]; then
        cp ftdetect/* ~/.vim/ftdetect
    fi

    if [ -d ftplugin ]; then
        cp ftplugin/* ~/.vim/ftplugin
    fi

    if [ -d indent ]; then
        cp indent/* ~/.vim/indent
    fi

    if [ -d syntax ]; then
        cp syntax/* ~/.vim/syntax
    fi

    if [ -d plugin ]; then
        cp plugin/* ~/.vim/plugin
    fi
}

find_large_files(){
    du -a $1 | sort -n -r | head -n $2
}

# List packages following a specific pattern. WARNING: Ubuntu-specific.
list_pkgs(){
    dpkg --get-selections | grep $1
}

wttr(){
    curl wttr.in/$1
}

# The One True Way
# Also see `python -m compileall`
pycheck(){
    python -m py_compile $1
}

mancp(){
    echo "The & operator takes a piece of data and tells you where it's stored."
    echo "The * operator takes an address and tells you what is stored there."
    echo "In the LHS, the * operator behaves a bit differently:"
    echo "int *x_address = &x; // Get the address of x so you can do pointer arithmetic on it."
    echo "*x_address = 42; // Reassign the value stored in x to 42."
}

# Mount windows drive read-only.
# Useful becase Windows boots so slow.
mountwin(){
    sudo mount -t "ntfs" -ro "uhelper=udisks2,nodev,nosuid,uid=1000,gid=1000" "/dev/sda3" "/media/chad/Windows"
}

docker_img_cleanup(){
    docker images -a | grep none | awk '{print $3}' | xargs docker rmi -f
}

crawl(){
    # Quick and dirty crawler (with download!) using wget. Useful for getting
    # ebooks off websites. Just pass the URL of the directory to download.
    # (Legality of action not checked.)
    # From: https://stackoverflow.com/a/273776/777225
    # Note: replace -nd with -x if you want to preserve directory structure.
    wget -e robots=off -r -nH -nd -np -R index.html* $1
}

# display the nth line of the given file.
# Usage: line n file
line(){
    if [ $# -ne 2 ]; then
        echo "Usage: line n file"
        return 1
    fi
    head -n $1 $2 | tail -n 1
}

# When SSH sessions to gcloud servers timeout, they usually end up adding stray
# characters to copy pastes. Use this command to stop that.
claste(){
    # See https://unix.stackexchange.com/a/196574
    printf "\e[?2004l"
}

fx(){
    # Spin up Firefox with a blank profile.
    firefox --new-instance --profile $(mktemp -d)
}

chrm(){
    # Spin up Chrome with a blank profile
    google-chrome --user-data-dir=$(mktemp -d)
}
